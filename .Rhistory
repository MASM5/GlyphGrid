df.wide[[paste("Answer_",i, sep="")]] = "EMPTYCELL"
df.wide[[paste("Score_",i, sep="")]] = "EMPTYCELL"
df.wide[[paste("KnowsIt_",i, sep="")]] = "EMPTYCELL"
}
for (i in 1:nrow(df.wide)){
partic_free = list()
if (!is.na(df.complete$datastring[i])){
a = fromJSON(df.complete$datastring[i])
mylength = length(a$data)
} else{
a = data.frame(NULL)
mylength = 0
}
print(mylength)
if (mylength==15){
df.wide$participant[i] = i
df.wide$workerId[i] = a$workerId
df.wide$browser[i] = df.complete$browser[i]
df.wide$beginhit[i] = df.complete$beginhit[i]
df.wide$condition[i] = df.complete$cond[i]
#cycle through all the trials, but only record where isTestTrial is 1
for (j in 1:mylength){
if(!is.null(a$data[[j]]$trialdata$isTestTrial)) {
if(a$data[[j]]$trialdata$isTestTrial == 1){
partic_free = c(partic_free, list(a$data[[j]]$trialdata))
}} #Else just don't make any columns right now!!!
}
trials[a$workerId] = list(partic_free)
} else{df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'}
#And grab the info we need from the last 'trial' (feedback)
if (is.null(a$data[[mylength-1]]$trialdata$responses)){df.wide$feedback[i] = "none"
}else{
df.wide$feedback[i] = a$data[[mylength-1]]$trialdata$responses
}
if (is.null(a$data[[1]]$trialdata$stimuli_and_ans)){df.wide$Answers[i] = "none"
}
for(k in 1:length(a$data[[1]]$trialdata$stimuli_and_ans)){
if (a$data[[1]]$trialdata$stimuli_and_ans[[k]][2] == 'painless with immense distance') {
df.wide[[paste("Answer_",k, sep="")]][i] = 'painless with a great closeness'
} else if (a$data[[1]]$trialdata$stimuli_and_ans[[k]][2] == 'I say hi there, to my bad body double') {
df.wide[[paste("Answer_",k, sep="")]][i] = 'I say hi there to my bad body double'
} else {
df.wide[[paste("Answer_",k, sep="")]][i] = a$data[[1]]$trialdata$stimuli_and_ans[[k]][2]
}
}
}
name_it = names(trials)
for (i in 1:nrow(df.wide)) {
if (df.wide$participant[i] == 'EXCLUDED' | length(trials[df.wide$workerId[i]][[1]]) != 10) {
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
}
for (i in 1:nrow(df.wide)){
if (df.wide$participant[i] != 'EXCLUDED'){
a = trials[[df.wide$workerId[i]]]
mylength = length(trials[[df.wide$workerId[i]]])
if (df.wide$condition[i] == 0){df.wide$condition[i] = 'NO CHANGE'
} else if (df.wide$condition[i] == 1) {df.wide$condition[i] = 'LOW NOISE'
} else {df.wide$condition[i] = 'HIGH NOISE'}
} else{
a = data.frame(NULL)
mylength = 0
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
next
}
for (j in 1:mylength) {
df.wide[[paste("Response_",j, sep="")]][i] = unlist(strsplit(a[[j]]$responses, '\"'))[4]
if (grepl('Q1\":\"y', a[[j]]$responses, ignore.case=TRUE)){
df.wide[[paste("KnowsIt_",j, sep="")]][i] = 1
} else {
df.wide[[paste("KnowsIt_",j, sep="")]][i] = 0
}
}
} #End of this participant
#create factors
answer_list = c()
score_list = c()
response_list = c()
knows_list = c()
for (i in 1:10) {
answer_list = c(answer_list, paste("Answer_",i, sep=""))
score_list = c(score_list, paste("Score_",i, sep=""))
response_list = c(response_list, paste("Response_",i, sep=""))
knows_list = c(knows_list, paste("KnowsIt_",i, sep=""))
}
list_of_lists = list(response_list, answer_list, score_list, knows_list) #type_list, change_list, literal_list, keypress_list, match_list)
df.clean = df.wide[df.wide$participant!="EXCLUDED",]
for (i in 1:nrow(df.wide)) {
for (j in 1:10) {
if (df.wide$participant[i] != "EXCLUDED") {
df.wide[[paste("Answer_",j, sep="")]][i] = tolower(df.wide[[paste("Answer_",j, sep="")]][i])
df.wide[[paste("Response_",j, sep="")]][i] = tolower(df.wide[[paste("Response_",j, sep="")]][i])
}}
}
givescore <- function(response, answer) {
if (response == '') {return(0)}
if (response == "KNOWStheSONG") {return("KNOWStheSONG")}
if (response == "EXCLUDED") {return("EXCLUDED")}
spltresp = unlist(strsplit(response, ' '))
spltansr = unlist(strsplit(answer, ' '))
score_array = c()
for (k in 1:length(spltresp)) {
check_word = gsub("[[:punct:]]", "", spltresp[k])
if (answer == "gotta leave you all behind and face the truth") {
if (grepl(check_word, 'gotta to', ignore.case=TRUE)) {
if (grepl(check_word, 'to', ignore.case=TRUE)) {next}
got_check = grepl(check_word, c('got', 'gotta'), ignore.case=TRUE)
if (mean(got_check[1]) == 1) {
gotto = 0
if (grepl('got', response, ignore.case=TRUE)) {
gotto = gotto + 1
}
if (grepl('to', response, ignore.case=TRUE)) {
gotto = gotto + 1
}
score_array = c(score_array, gotto/2)
next
} else {
score_array = c(score_array, mean(got_check[2]))
next
}
}
}
if (answer == "I'm a soul man") {
if (grepl(check_word, 'Im am', ignore.case=TRUE)) {
if (grepl(check_word, 'am', ignore.case=TRUE)) {next}
got_check = grepl(check_word, c('I', 'Im'), ignore.case=TRUE)
if (mean(got_check[1]) == 1) {
gotto = 0
if (grepl('I', response, ignore.case=TRUE)) {
gotto = gotto + 1
}
if (grepl('am', response, ignore.case=TRUE)) {
gotto = gotto + 1
}
score_array = c(score_array, gotto/2)
next
} else {
score_array = c(score_array, mean(got_check[2]))
next
}
}
}
if (grepl(check_word, answer, ignore.case=TRUE)) {
score_array = c(score_array, 1)
} else {
score_array = c(score_array, 0)
}
}
return(as.numeric(sum(score_array)/length(spltansr)))
}
for (j in 1:10) {
df.wide[[paste("Score_",j, sep="")]] = mapply(givescore, response=df.wide[[paste("Response_",j, sep="")]], answer=df.wide[[paste("Answer_",j, sep="")]], USE.NAMES=FALSE)
}
####CODE IS GOOD UP TO HERE#####
#Caculate score for each participant
# temp = unlist(strsplit(df.wide[[paste("Answer_",j, sep="")]][i], ' '))
# score = c()
# for (k in 1:length(temp)) {
#   if (isTRUE(as.logical(grep(temp[k], a[[j]]$responses, ignore.case=TRUE)))){
#     score = c(score, 1)
#   } else {
#     score = c(score, 0)
#   }
# }
# df.wide[[paste("Score_",j, sep="")]][i] = mean(score)
# } else {df.wide[[paste("Score_",j, sep="")]][i] = NA}
#Reformat into long form!
## Wide to long
df.long <- reshape(df.wide,
varying = list_of_lists,
v.names = c('response', 'stimulus', 'score', 'knowsit'),
timevar = "trial.number",
times = 1:10,
direction = "long")
## Sort df.long
df.long <- df.long[order(df.long$workerId),]
df.long <- df.long[df.long$participant!="EXCLUDED",]
for (i in 1:nrow(df.long)) {
df.long$response[i] = tolower(gsub("[[:punct:]]", "", df.long$response[i]))
df.long$stimulus[i] = tolower(gsub("[[:punct:]]", "", df.long$stimulus[i]))
}
stimuli = as.vector(unique(df.long$stimulus))
WordLists = list()
for (s in 1:length(stimuli)) {
temp = list()
temp.data = as.data.frame(df.long[df.long$stimulus==stimuli[s],])
resp_words = c()
resp_usage = c()
fifty_words = list()
temp.data.rows = nrow(temp.data)
for (j in 1:nrow(temp.data)) {
resp_words = unique(c(resp_words, unlist(strsplit(temp.data$response[j], split=" "))))
}
resp_words = resp_words[-which(resp_words %in% '')]
for (k in 1:length(resp_words)) {
resp_word_temp = c()
for (j in 1:nrow(temp.data)) {
check_it = unlist(strsplit(temp.data$response[j], split=' '))
resp_word_temp = c(resp_word_temp, resp_words[k] %in% check_it)
}
resp_usage = c(resp_usage, sum(resp_word_temp)/temp.data.rows)
}
for (h in 1:25) {
fifty_words[h] = list(c(resp_words[which.max(resp_usage)], resp_usage[which.max(resp_usage)]))
resp_words = resp_words[-which.max(resp_usage)]
resp_usage = resp_usage[-which.max(resp_usage)]
}
WordLists[stimuli[s]] = list(fifty_words)
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
## Get Basic Stats for Each Item WITHOUT ACCOUNT FOR WHETHER PARTICIPANT KNOWS SONG
WithKnows_list = list()
for (s in 1:length(stimuli)) {
temp = list()
temp.data = as.data.frame(df.long[df.long$stimulus==stimuli[s],])
temp.data.percent = as.data.frame(temp.data)
temp.data.mode = as.data.frame(temp.data)
datarows = nrow(temp.data)
temp$MeanScore = mean(as.numeric(temp.data$score), na.rm=TRUE)
temp$PercentKnown = mean(as.numeric(temp.data$knowsit), na.rm=TRUE)
temp$Response1 = list()
temp$Response1$response = Mode(temp.data.mode$response)
temp.data.percent = temp.data[temp.data$response!=temp$Response1$response,]
temp.data.mode = temp.data.mode[temp.data.mode$response!=temp$Response1$response,]
temp$Response1$percent = (datarows - nrow(temp.data.percent))/datarows
temp$Response2 = list()
temp$Response2$response = Mode(temp.data.mode$response)
temp.data.percent = temp.data[temp.data$response!=temp$Response2$response,]
temp.data.mode = temp.data.mode[temp.data.mode$response!=temp$Response2$response,]
temp$Response2$percent = (datarows - nrow(temp.data.percent))/datarows
temp$Response3 = list()
temp$Response3$response = Mode(temp.data.mode$response)
temp.data.percent = temp.data[temp.data$response!=temp$Response3$response,]
temp.data.mode = temp.data.mode[temp.data.mode$response!=temp$Response3$response,]
temp$Response3$percent = (datarows - nrow(temp.data.percent))/datarows
WithKnows_list[stimuli[s]] = list(temp)
}
## Clean up df.long some more
df.long <- df.long[df.long$knowsit!="1",]
df.long.imperfect <- df.long[df.long$score!="1",]
df.long$score <- as.numeric(df.long$score)
df.long$knowsit <- as.numeric(df.long$knowsit)
std_error = function(samples) {
sd(samples, na.rm=TRUE) / sqrt(length(samples))
}
dodge <- position_dodge(width=0.9)
summ.info1 = df.long %>%
group_by(condition) %>%
summarise(PercentCorrect=mean(score, na.rm=TRUE), se=std_error(score))
summ.info1$lower <- summ.info1$PercentCorrect - 1.96*summ.info1$se
summ.info1$upper <- summ.info1$PercentCorrect + 1.96*summ.info1$se
graph1 = ggplot(summ.info1, aes(x=condition, y=PercentCorrect, fill=condition)) + geom_bar(stat="identity", position=dodge) +
geom_errorbar(aes(ymin=lower, ymax=upper, width=.5), position=dodge, stat="identity")
summ.info2 = df.long %>%
group_by(stimulus, condition) %>%
summarise(mean=mean(score, na.rm=TRUE), se=std_error(score))
summ.info2$lower <- summ.info2$m - 1.96*summ.info2$se
summ.info2$upper <- summ.info2$m + 1.96*summ.info2$se
graph2 = ggplot(summ.info2, aes(x=condition, y=mean, fill=condition)) + geom_bar(stat="identity", position=dodge) +
geom_errorbar(aes(ymin=lower, ymax=upper, width=.5), position=dodge, stat="identity") + facet_wrap(~stimulus)
graph2
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
library(stringr)
library(ggplot2)
library(Hmisc)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "/Users/masm/Desktop/GlyphGrid/participants.db");
df.complete = dbReadTable(con,"glyphs") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes (using dplyr methods)
df.complete = subset(df.complete, status %in% c(3,4))
#nrow(df.complete) includes alll subjects ever plus all debug attempts!
#filter to a particular day (if I haven't set codeversions). OR together multiple days if needed
df.complete$currentVersion.pilot1 = str_detect(df.complete$beginhit, "2015-03-24")
df.complete$currentVersion.pilot2 = str_detect(df.complete$beginhit, "2015-03-25")
df.complete$currentVersion.pilot3 = str_detect(df.complete$beginhit, "2015-05-27")
#Run 1, 03/24/2015 - 03/25/2015
#df.complete = df.complete[df.complete$currentVersion.pilot1 == TRUE | df.complete$currentVersion.pilot2 == TRUE,]
#Run 2, 1/16/15
df.complete = df.complete[df.complete$currentVersion.pilot3 == TRUE,]
nrow(df.complete)
#filter out 'debug' participants!
df.complete = filter(df.complete, !str_detect(df.complete$workerid,"debug"))
nrow(df.complete)
# Structure data ----------------------------------------------------------
#Note: Compile in wide form: 1 row/participant; each trial gets a series of column names, formatted XYFIELD_#
#Also, no extra underscores in the column names, this breaks wideToLong
#df.wide = data.frame(NULL)
df.wide = data.frame(matrix(nrow=nrow(df.complete),ncol=4))
colnames(df.wide) = c("participant","workerId","browser","beginhit") #will dynamically add columns from datastring below
global_indeces = c()
free_sorts = list()
for (i in 1:nrow(df.wide)){
partic_free = list()
if (!is.na(df.complete$datastring[i])){
a = fromJSON(df.complete$datastring[i])
mylength = length(a$data)
} else{
a = data.frame(NULL)
mylength = 0
}
print(mylength)
if (mylength>=51){
df.wide$participant[i] = i
df.wide$workerId[i] = a$workerId
df.wide$browser[i] = df.complete$browser[i]
df.wide$beginhit[i] = df.complete$beginhit[i]
#cycle through all the trials, but only record where isTestTrial = 1
for (j in 1:mylength){
if(a$data[[j]]$trialdata$trial_type == "free-sort"){
partic_free = c(partic_free, list(a$data[[j]]$trialdata))
} #Else just don't make any columns right now!!!
}
free_sorts[a$workerId] = list(partic_free)
}
#And grab the info we need from the last 'trial' (feedback)
if (is.null(a$data[[mylength-1]]$trialdata$responses)){df.wide$feedback[i] = "none"
}else{
df.wide$feedback[i] = a$data[[mylength-1]]$trialdata$responses
}
}
name_it = names(free_sorts)
for (i in 1:length(free_sorts)) {
if (length(free_sorts[[name_it[i]]]) != 22) {
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
}
for (i in 1:nrow(df.wide)){
counter = 1
if (df.wide$participant[i] != 'EXCLUDED'){
a = free_sorts[[df.wide$workerId[i]]]
mylength = length(free_sorts[[df.wide$workerId[i]]])
} else{
a = data.frame(NULL)
mylength = 0
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
for (j in mylength:1) {
if(j == mylength) {max_g_i = free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$glyph)){
trial_num = (28 - (max_g_i - free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global))
df.wide[[paste("glyph_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$glyph
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$moviefile)){
trial_num = (26 - (max_g_i - free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global))
df.wide[[paste("MovieFile_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$moviefile
}
#   if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$rt)){
#     df.wide[[paste("rt_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$rt
#   }
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$moves)){
df.wide[[paste("moves_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$moves
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Sub)){
df.wide[[paste("S_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Sub
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Vrb)){
df.wide[[paste("V_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Vrb
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Obj)){
df.wide[[paste("O_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Obj
}
}
} #End of this participant
##### NEW DATA WORKS WITH CODE UP TO HERE SO FAR #####
names = c('moves_', "S_", "O_", "V_", "glyph_")
col.names = names(df.wide)
col.nums = c()
where_moves = which(str_detect(col.names, 'moves'))
for (w in 1:length(where_moves)) {
col.nums = unique(c(col.nums, unlist(strsplit(col.names[where_moves][w], split='moves_'))))
}
col.nums = as.numeric(col.nums[-which(col.nums %in% "")])
df.wide[paste('WordOrd_', col.nums, sep='')] = 'NoOrderYet'
for (j in 1:nrow(df.wide)){
if (df.wide$participant[j] != "EXCLUDED"){
for (k in 1:length(col.nums)) {
if (exists(paste('MovieFile_', col.nums[k], sep = ""), where=df.wide)) {
check_m = df.wide[paste(names[1], col.nums[k], sep = "")][j,]
check_s = df.wide[paste(names[2], col.nums[k], sep = "")][j,]
check_o = df.wide[paste(names[3], col.nums[k], sep = "")][j,]
check_v = df.wide[paste(names[4], col.nums[k], sep = "")][j,]
where_s = where_o = where_v = ''
if (unlist(gregexpr(check_s, check_m))[1] != -1) {
where_s = unlist(gregexpr(check_s, check_m))}
if (unlist(gregexpr(check_o, check_m))[1] != -1) {
where_o = unlist(gregexpr(check_o, check_m))}
if (unlist(gregexpr(check_v, check_m))[1] != -1) {
where_v = unlist(gregexpr(check_v, check_m))}
where_svo = as.numeric(c(where_s, where_v, where_o))
where_svo = sort(where_svo)
word_order = ''
if (length(where_svo) > 0) {
for (l in 1:length(where_svo)) {
if (where_svo[l] %in% where_s) {
word_order = paste(word_order, 'S', sep='')
} else if (where_svo[l] %in% where_o) {
word_order = paste(word_order, 'O', sep='')
} else if (where_svo[l] %in% where_v) {
word_order = paste(word_order, 'V', sep='')
}
}} else {word_order = 'NONE'}
df.wide[paste('WordOrd_', col.nums[k], sep = "")][j,] = word_order
} else {
check_m = df.wide[paste(names[1], col.nums[k], sep = "")][j,]
check_g = df.wide[paste(names[5], col.nums[k], sep = "")][j,]
where_g = ''
if (unlist(gregexpr(check_g, check_m))[1] != -1) {
where_g = unlist(gregexpr(check_g, check_m))
}
where_moved = as.numeric(where_g)
where_moved = sort(where_moved)
word_order = ''
if (length(where_moved) > 0) {
for (l in 1:length(where_moved)) {
if (where_moved[l] %in% where_g) {
word_order = paste(word_order, 'G', sep='')
}
}} else {word_order = 'NONE'}
df.wide[paste('WordOrd_', col.nums[k], sep = "")][j,] = word_order
}
}
}
}
#REFORMAT FROM WIDE TO LONG
moves_list = c()
stimulus_list = c()
S_list = c()
O_list = c()
V_list = c()
order_list = c()
for (i in 1:length(col.nums)) {
if (col.nums[i] > 6) {
moves_list = c(moves_list, paste("moves_",col.nums[i], sep=""))
stimulus_list = c(stimulus_list, paste("MovieFile_",col.nums[i], sep=""))
S_list = c(S_list, paste("S_",col.nums[i], sep=""))
O_list = c(O_list, paste("O_",col.nums[i], sep=""))
V_list = c(V_list, paste("V_",col.nums[i], sep=""))
order_list = c(order_list, paste("WordOrd_",col.nums[i], sep=""))
# answers_list = c(answers_list, paste("Answers_",col.nums[i], sep=""))
}}
list_of_lists = list(stimulus_list, S_list, O_list, V_list, moves_list, order_list) #literal_list, keypress_list, match_list)
df.long <- reshape(df.wide,
varying = list_of_lists,
v.names = c('video', 'Sglyph', 'Oglyph', 'Vglyph', 'moves', 'LongOrder'),
timevar = "trial.number",
times = 1:length(moves_list),
drop = c("WordOrd_6", "WordOrd_4", "WordOrd_3", "WordOrd_1", "MovieFile_6", "moves_6", "S_6", "V_6", "O_6", "MovieFile_4", "moves_4", "S_4", "V_4", "O_4", "glyph_3", "moves_3", "glyph_1", "moves_1"),
direction = "long")
## Sort df.long
df.long <- df.long[order(df.long$workerId),]
long_split = strsplit(df.long$LongOrder, '')
short_order = list()
for (i in 1:length(long_split)){
short_order[[i]] = paste(unique(long_split[[i]]), collapse='')
}
df.long$ShortOrder = as.factor(unlist(short_order))
df.long$IsTransitive = as.numeric(!str_detect(df.long$Oglyph, 'none'))
complete_answer = function(ShortOrder, IsTransitive) {
if (IsTrasitive == 1 & length(ShortOrder) == 3) {
complete = 1
} else if (IsTrasitive == 0 & length(ShortOrder) == 2) {
complete = 1
} else {complete = 0}
return(complete)
}
mapply(complete_answer, ShortOrder = df.long$ShortOrder, IsTransitive = df.long$IsTransitive)
complete_answer = function(ShortOrder, IsTransitive) {
if (IsTrasitive == 1 & length(ShortOrder) == 3) {
complete = 1
} else if (IsTransitive == 0 & length(ShortOrder) == 2) {
complete = 1
} else {complete = 0}
return(complete)
}
mapply(complete_answer, ShortOrder = df.long$ShortOrder, IsTransitive = df.long$IsTransitive)
complete_answer = function(ShortOrder, IsTransitive) {
if (IsTransitive == 1 & length(ShortOrder) == 3) {
complete = 1
} else if (IsTransitive == 0 & length(ShortOrder) == 2) {
complete = 1
} else {complete = 0}
return(complete)
}
mapply(complete_answer, ShortOrder = df.long$ShortOrder, IsTransitive = df.long$IsTransitive)
complete_answer = function(ShortOrder, IsTransitive) {
if (IsTransitive == 1 & nchar(ShortOrder) == 3) {
complete = 1
} else if (IsTransitive == 0 & nchar(ShortOrder) == 2) {
complete = 1
} else {complete = 0}
return(complete)
}
mapply(complete_answer, ShortOrder = df.long$ShortOrder, IsTransitive = df.long$IsTransitive)
nchar(df.long$ShortOrder)
