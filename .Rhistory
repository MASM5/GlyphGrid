} else {
p_lat = p_lat + 1
}
}
}
p_lat = p_lat/(p_lat+p_med)
cln.table[order_col_names[j]][(nrow(cln.table)-2),] = p_lat*100
cln.table[order_col_names[j]][(nrow(cln.table)-1),] = p_none
p_none = p_none/(p_lat+p_med+p_none)
cln.table[order_col_names[j]][(nrow(cln.table)),] = p_none
}
directory = getwd()
write.csv(cln.table, file = paste0(directory, "/dfwide.csv"))
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
library(stringr)
library(ggplot2)
library(Hmisc)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "/Users/miguelsalinas/Desktop/GlyphsTurk/participants.db");
df.complete = dbReadTable(con,"glyphs") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes (using dplyr methods)
df.complete = subset(df.complete, status %in% c(3,4))
#nrow(df.complete) includes alll subjects ever plus all debug attempts!
#filter to a particular day (if I haven't set codeversions). OR together multiple days if needed
df.complete$currentVersion.pilot1 = str_detect(df.complete$beginhit, "2015-03-24")
df.complete$currentVersion.pilot2 = str_detect(df.complete$beginhit, "2015-03-25")
#Run 1, 03/24/2015 - 03/25/2015
df.complete = df.complete[df.complete$currentVersion.pilot1 == TRUE | df.complete$currentVersion.pilot2 == TRUE,]
#Run 2, 1/16/15
#df.complete = df.complete[df.complete$currentVersion4 == TRUE,]
nrow(df.complete)
#filter out 'debug' participants!
df.complete = filter(df.complete, !str_detect(df.complete$workerid,"debug"))
nrow(df.complete)
# Structure data ----------------------------------------------------------
#Note: Compile in wide form: 1 row/participant; each trial gets a series of column names, formatted XYFIELD_#
#Also, no extra underscores in the column names, this breaks wideToLong
#df.wide = data.frame(NULL)
df.wide = data.frame(matrix(nrow=nrow(df.complete),ncol=4))
colnames(df.wide) = c("participant","workerId","browser","beginhit") #will dynamically add columns from datastring below
global_indeces = c()
free_sorts = list()
for (i in 1:nrow(df.wide)){
partic_free = list()
if (!is.na(df.complete$datastring[i])){
a = fromJSON(df.complete$datastring[i])
mylength = length(a$data)
} else{
a = data.frame(NULL)
mylength = 0
}
print(mylength)
if (mylength>=85){
df.wide$participant[i] = i
df.wide$workerId[i] = a$workerId
df.wide$browser[i] = df.complete$browser[i]
df.wide$beginhit[i] = df.complete$beginhit[i]
#cycle through all the trials, but only record where isTestTrial = 1
for (j in 1:mylength){
if(a$data[[j]]$trialdata$trial_type == "free-sort"){
partic_free = c(partic_free, list(a$data[[j]]$trialdata))
} #Else just don't make any columns right now!!!
}
free_sorts[a$workerId] = list(partic_free)
}
#And grab the info we need from the last 'trial' (feedback)
if (is.null(a$data[[mylength-1]]$trialdata$responses)){df.wide$feedback[i] = "none"
}else{
df.wide$feedback[i] = a$data[[mylength-1]]$trialdata$responses
}
}
name_it = names(free_sorts)
for (i in 1:length(free_sorts)) {
if (length(free_sorts[[name_it[i]]]) != 60) {
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
}
for (i in 1:nrow(df.wide)){
counter = 1
if (df.wide$participant[i] != 'EXCLUDED'){
a = free_sorts[[df.wide$workerId[i]]]
mylength = length(free_sorts[[df.wide$workerId[i]]])
} else{
a = data.frame(NULL)
mylength = 0
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
for (j in mylength:1) {
if(j == mylength) {max_g_i = free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$glyph)){
trial_num = (21 - (max_g_i - free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global))
df.wide[[paste("glyph_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$glyph
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$moviefile)){
trial_num = (20 - (max_g_i - free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global))
df.wide[[paste("MovieFile_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$moviefile
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$rt)){
df.wide[[paste("rt_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$rt
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$moves)){
df.wide[[paste("moves_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$moves
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Sub)){
df.wide[[paste("S_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Sub
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Vrb)){
df.wide[[paste("V_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Vrb
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Obj)){
df.wide[[paste("O_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Obj
}
}
} #End of this participant
names = c('moves_', "S_", "O_", "V_")
for (w in 3:20) {
df.wide[paste('WordOrd_', w, sep = "")] = "EXCLUDED"
}
for (j in 1:nrow(df.wide)){
if (df.wide$participant[j] != "EXCLUDED"){
for (k in 3:20) {
check_m = df.wide[paste(names[1], k, sep = "")][j,]
check_s = df.wide[paste(names[2], k, sep = "")][j,]
check_o = df.wide[paste(names[3], k, sep = "")][j,]
check_v = df.wide[paste(names[4], k, sep = "")][j,]
where_s = where_o = where_v = ''
if (unlist(gregexpr(check_s, check_m))[1] != -1) {
where_s = unlist(gregexpr(check_s, check_m))}
if (unlist(gregexpr(check_o, check_m))[1] != -1) {
where_o = unlist(gregexpr(check_o, check_m))}
if (unlist(gregexpr(check_v, check_m))[1] != -1) {
where_v = unlist(gregexpr(check_v, check_m))}
where_svo = as.numeric(c(where_s, where_v, where_o))
where_svo = sort(where_svo)
word_order = ''
if (length(where_svo) > 0) {
for (l in 1:length(where_svo)) {
if (where_svo[l] %in% where_s) {
word_order = paste(word_order, 'S', sep='')
} else if (where_svo[l] %in% where_o) {
word_order = paste(word_order, 'O', sep='')
} else if (where_svo[l] %in% where_v) {
word_order = paste(word_order, 'V', sep='')
}
}} else {word_order = 'NONE'}
df.wide[paste('WordOrd_', k, sep = "")][j,] = word_order
}
}
}
it_events = c("girl-tumbling-none", "boy-rolling-none", "car-rolling-none", "ball-rolling-none")
animates = c("fireman-pushing-boy", "fireman-kicking-girl", "girl-elbowing-oldlady", "girl-kissing-boy", "girl-throwing-oldlady", "boy-lifting-girl",  "oldlady-rubbing-fireman")
inanimates = c("fireman-lifting-car", "fireman-throwing-ball", "oldlady-kissing-ball", "oldlady-elbowing-heart", "girl-rubbing-heart", "boy-kicking-ball", "girl-pushing-car")
all_events = c(it_events, animates, inanimates)
order_col_names = c()
for (w in 1:length(all_events)) {
change_name_in = ''
in_col = unlist(strsplit(all_events[w], '-'))
change_name_in = paste(in_col[1], '.', sep = "")
change_name_in = paste(change_name_in, unlist(strsplit(in_col[2], ''))[1], sep = "")
if (all_events[w] %in% it_events) {
change_name_in = paste("Intran.", paste(change_name_in, paste('.', in_col[3], sep=""), sep = ""), sep="")
} else if (all_events[w] %in% animates) {
change_name_in = paste("A.", paste(change_name_in, paste('.', in_col[3], sep=""), sep = ""), sep="")
} else if (all_events[w] %in% inanimates) {
change_name_in = paste("I.", paste(change_name_in, paste('.', in_col[3], sep=""), sep = ""), sep="")
}
df.wide[change_name_in] = "EXCLUDED"
order_col_names = c(order_col_names, change_name_in)
}
for (k in 1:nrow(df.wide)) {
if (df.wide$participant[k] != "EXCLUDED") {
for (i in (1:length(all_events)+2)) {
for (j in 1:length(all_events)) {
if (isTRUE(unlist(gregexpr(all_events[j], df.wide[paste("MovieFile_", i, sep = "")][k,])) == 1)) {
if (df.wide[paste("WordOrd_", i, sep = "")][k,] != 'NONE') {
long_order = df.wide[paste("WordOrd_", i, sep = "")][k,]
long_order = unlist(strsplit(long_order, ''))
how_long = length(long_order)
short_order = ''
for (l in 1:how_long) {
short_order = unique(c(short_order, long_order[l]))
}
short_order = paste(short_order, collapse='')
df.wide[order_col_names[j]][k,] = short_order
} else {df.wide[order_col_names[j]][k,] = 'NONE'}
}
}
}
}
}
cln.table = df.wide[1:4]
cln.table[order_col_names[5:length(order_col_names)]] = df.wide[order_col_names[5:length(order_col_names)]]
#cln.table <- data.frame(matrix(unlist(cln.table), nrow=nrow(cln.table)))
cln.table$Per.Vlat = cln.table$Per.Vmed = cln.table$Per.Othe = 0
for (i in 1:nrow(cln.table)) {
if (cln.table$participant[i] != 'EXCLUDED') {
p_lat = p_med = p_none = 0
for (j in 5:length(order_col_names)) {
if ((cln.table[order_col_names[j]])[i,] != 'NONE') {
if (length(unlist(strsplit((cln.table[order_col_names[j]])[i,], ''))) != 3) {
p_none = p_none + 1
} else {
where = unlist(gregexpr('V', (cln.table[order_col_names[j]])[i,]))
if (where == 2) {
p_med = p_med + 1
} else {
p_lat = p_lat + 1
}
}
}
}
tot = (p_none+p_med+p_lat)
p_none = p_none/tot
p_med = p_med/tot
p_lat = p_lat/tot
cln.table$Per.Vlat[i] = p_lat
cln.table$Per.Vmed[i] = p_med
cln.table$Per.Othe[i] = p_none
}
}
cln.table[(nrow(cln.table)+1),] = "%Vlat"
cln.table[(nrow(cln.table)+1),] = "#Incomplete"
cln.table[(nrow(cln.table)+1),] = "%Incomplete"
j = 5
cow = order_col_names[j]
p_lat = p_med = p_none = 0
for (i in 1:(nrow(cln.table)-2)) {
if (length(unlist(strsplit((cln.table[order_col_names[j]])[i,], ''))) != 3) {
p_none = p_none + 1
} else {
where = unlist(gregexpr('V', (cln.table[order_col_names[j]])[i,]))
if (where == 2) {
p_med = p_med + 1
} else {
p_lat = p_lat + 1
}
}
}
p_lat
p_med
p_none
j = 5
p_lat = p_med = p_none = 0
for (i in 1:(nrow(cln.table)-3)) {
if (length(unlist(strsplit((cln.table[order_col_names[j]])[i,], ''))) != 3) {
p_none = p_none + 1
} else {
where = unlist(gregexpr('V', (cln.table[order_col_names[j]])[i,]))
if (where == 2) {
p_med = p_med + 1
} else {
p_lat = p_lat + 1
}
}
}
p_lat
p_med
p_none
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
library(stringr)
library(ggplot2)
library(Hmisc)
mean.na.rm <- function(x) { mean(x,na.rm=T) }
sum.na.rm <- function(x) { sum(x,na.rm=T) }
stderr <- function(x) sqrt(var(x)/length(x))
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "/Users/miguelsalinas/Desktop/GlyphsTurk/participants.db");
df.complete = dbReadTable(con,"glyphs") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes (using dplyr methods)
df.complete = subset(df.complete, status %in% c(3,4))
#nrow(df.complete) includes alll subjects ever plus all debug attempts!
#filter to a particular day (if I haven't set codeversions). OR together multiple days if needed
df.complete$currentVersion.pilot1 = str_detect(df.complete$beginhit, "2015-03-24")
df.complete$currentVersion.pilot2 = str_detect(df.complete$beginhit, "2015-03-25")
#Run 1, 03/24/2015 - 03/25/2015
df.complete = df.complete[df.complete$currentVersion.pilot1 == TRUE | df.complete$currentVersion.pilot2 == TRUE,]
#Run 2, 1/16/15
#df.complete = df.complete[df.complete$currentVersion4 == TRUE,]
nrow(df.complete)
#filter out 'debug' participants!
df.complete = filter(df.complete, !str_detect(df.complete$workerid,"debug"))
nrow(df.complete)
# Structure data ----------------------------------------------------------
#Note: Compile in wide form: 1 row/participant; each trial gets a series of column names, formatted XYFIELD_#
#Also, no extra underscores in the column names, this breaks wideToLong
#df.wide = data.frame(NULL)
df.wide = data.frame(matrix(nrow=nrow(df.complete),ncol=4))
colnames(df.wide) = c("participant","workerId","browser","beginhit") #will dynamically add columns from datastring below
global_indeces = c()
free_sorts = list()
for (i in 1:nrow(df.wide)){
partic_free = list()
if (!is.na(df.complete$datastring[i])){
a = fromJSON(df.complete$datastring[i])
mylength = length(a$data)
} else{
a = data.frame(NULL)
mylength = 0
}
print(mylength)
if (mylength>=85){
df.wide$participant[i] = i
df.wide$workerId[i] = a$workerId
df.wide$browser[i] = df.complete$browser[i]
df.wide$beginhit[i] = df.complete$beginhit[i]
#cycle through all the trials, but only record where isTestTrial = 1
for (j in 1:mylength){
if(a$data[[j]]$trialdata$trial_type == "free-sort"){
partic_free = c(partic_free, list(a$data[[j]]$trialdata))
} #Else just don't make any columns right now!!!
}
free_sorts[a$workerId] = list(partic_free)
}
#And grab the info we need from the last 'trial' (feedback)
if (is.null(a$data[[mylength-1]]$trialdata$responses)){df.wide$feedback[i] = "none"
}else{
df.wide$feedback[i] = a$data[[mylength-1]]$trialdata$responses
}
}
name_it = names(free_sorts)
for (i in 1:length(free_sorts)) {
if (length(free_sorts[[name_it[i]]]) != 60) {
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
}
for (i in 1:nrow(df.wide)){
counter = 1
if (df.wide$participant[i] != 'EXCLUDED'){
a = free_sorts[[df.wide$workerId[i]]]
mylength = length(free_sorts[[df.wide$workerId[i]]])
} else{
a = data.frame(NULL)
mylength = 0
df.wide[i,] = 'EXCLUDED'
df.wide$workerId[i] = 'TOO MANY TRIALS'
}
for (j in mylength:1) {
if(j == mylength) {max_g_i = free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$glyph)){
trial_num = (21 - (max_g_i - free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global))
df.wide[[paste("glyph_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$glyph
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$moviefile)){
trial_num = (20 - (max_g_i - free_sorts[[df.wide$workerId[i]]][[j]]$trial_index_global))
df.wide[[paste("MovieFile_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$moviefile
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$rt)){
df.wide[[paste("rt_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$rt
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$moves)){
df.wide[[paste("moves_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$moves
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Sub)){
df.wide[[paste("S_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Sub
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Vrb)){
df.wide[[paste("V_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Vrb
}
if(!is.null(free_sorts[[df.wide$workerId[i]]][[j]]$Obj)){
df.wide[[paste("O_",trial_num, sep="")]][i] = free_sorts[[df.wide$workerId[i]]][[j]]$Obj
}
}
} #End of this participant
names = c('moves_', "S_", "O_", "V_")
for (w in 3:20) {
df.wide[paste('WordOrd_', w, sep = "")] = "EXCLUDED"
}
for (j in 1:nrow(df.wide)){
if (df.wide$participant[j] != "EXCLUDED"){
for (k in 3:20) {
check_m = df.wide[paste(names[1], k, sep = "")][j,]
check_s = df.wide[paste(names[2], k, sep = "")][j,]
check_o = df.wide[paste(names[3], k, sep = "")][j,]
check_v = df.wide[paste(names[4], k, sep = "")][j,]
where_s = where_o = where_v = ''
if (unlist(gregexpr(check_s, check_m))[1] != -1) {
where_s = unlist(gregexpr(check_s, check_m))}
if (unlist(gregexpr(check_o, check_m))[1] != -1) {
where_o = unlist(gregexpr(check_o, check_m))}
if (unlist(gregexpr(check_v, check_m))[1] != -1) {
where_v = unlist(gregexpr(check_v, check_m))}
where_svo = as.numeric(c(where_s, where_v, where_o))
where_svo = sort(where_svo)
word_order = ''
if (length(where_svo) > 0) {
for (l in 1:length(where_svo)) {
if (where_svo[l] %in% where_s) {
word_order = paste(word_order, 'S', sep='')
} else if (where_svo[l] %in% where_o) {
word_order = paste(word_order, 'O', sep='')
} else if (where_svo[l] %in% where_v) {
word_order = paste(word_order, 'V', sep='')
}
}} else {word_order = 'NONE'}
df.wide[paste('WordOrd_', k, sep = "")][j,] = word_order
}
}
}
it_events = c("girl-tumbling-none", "boy-rolling-none", "car-rolling-none", "ball-rolling-none")
animates = c("fireman-pushing-boy", "fireman-kicking-girl", "girl-elbowing-oldlady", "girl-kissing-boy", "girl-throwing-oldlady", "boy-lifting-girl",  "oldlady-rubbing-fireman")
inanimates = c("fireman-lifting-car", "fireman-throwing-ball", "oldlady-kissing-ball", "oldlady-elbowing-heart", "girl-rubbing-heart", "boy-kicking-ball", "girl-pushing-car")
all_events = c(it_events, animates, inanimates)
order_col_names = c()
for (w in 1:length(all_events)) {
change_name_in = ''
in_col = unlist(strsplit(all_events[w], '-'))
change_name_in = paste(in_col[1], '.', sep = "")
change_name_in = paste(change_name_in, unlist(strsplit(in_col[2], ''))[1], sep = "")
if (all_events[w] %in% it_events) {
change_name_in = paste("Intran.", paste(change_name_in, paste('.', in_col[3], sep=""), sep = ""), sep="")
} else if (all_events[w] %in% animates) {
change_name_in = paste("A.", paste(change_name_in, paste('.', in_col[3], sep=""), sep = ""), sep="")
} else if (all_events[w] %in% inanimates) {
change_name_in = paste("I.", paste(change_name_in, paste('.', in_col[3], sep=""), sep = ""), sep="")
}
df.wide[change_name_in] = "EXCLUDED"
order_col_names = c(order_col_names, change_name_in)
}
for (k in 1:nrow(df.wide)) {
if (df.wide$participant[k] != "EXCLUDED") {
for (i in (1:length(all_events)+2)) {
for (j in 1:length(all_events)) {
if (isTRUE(unlist(gregexpr(all_events[j], df.wide[paste("MovieFile_", i, sep = "")][k,])) == 1)) {
if (df.wide[paste("WordOrd_", i, sep = "")][k,] != 'NONE') {
long_order = df.wide[paste("WordOrd_", i, sep = "")][k,]
long_order = unlist(strsplit(long_order, ''))
how_long = length(long_order)
short_order = ''
for (l in 1:how_long) {
short_order = unique(c(short_order, long_order[l]))
}
short_order = paste(short_order, collapse='')
df.wide[order_col_names[j]][k,] = short_order
} else {df.wide[order_col_names[j]][k,] = 'NONE'}
}
}
}
}
}
cln.table = df.wide[1:4]
cln.table[order_col_names[5:length(order_col_names)]] = df.wide[order_col_names[5:length(order_col_names)]]
#cln.table <- data.frame(matrix(unlist(cln.table), nrow=nrow(cln.table)))
cln.table$Per.Vlat = cln.table$Per.Vmed = cln.table$Per.Othe = 0
for (i in 1:nrow(cln.table)) {
if (cln.table$participant[i] != 'EXCLUDED') {
p_lat = p_med = p_none = 0
for (j in 5:length(order_col_names)) {
if ((cln.table[order_col_names[j]])[i,] != 'NONE') {
if (length(unlist(strsplit((cln.table[order_col_names[j]])[i,], ''))) != 3) {
p_none = p_none + 1
} else {
where = unlist(gregexpr('V', (cln.table[order_col_names[j]])[i,]))
if (where == 2) {
p_med = p_med + 1
} else {
p_lat = p_lat + 1
}
}
}
}
tot = (p_none+p_med+p_lat)
p_none = p_none/tot
p_med = p_med/tot
p_lat = p_lat/tot
cln.table$Per.Vlat[i] = p_lat
cln.table$Per.Vmed[i] = p_med
cln.table$Per.Othe[i] = p_none
}
}
cln.table[(nrow(cln.table)+1),] = "%Vlat"
cln.table[(nrow(cln.table)+1),] = "#Incomplete"
cln.table[(nrow(cln.table)+1),] = "%Incomplete"
for (j in 5:length(order_col_names)) {
p_lat = p_med = p_none = 0
for (i in 1:(nrow(cln.table)-3)) {
if (length(unlist(strsplit((cln.table[order_col_names[j]])[i,], ''))) != 3) {
p_none = p_none + 1
} else {
where = unlist(gregexpr('V', (cln.table[order_col_names[j]])[i,]))
if (where == 2) {
p_med = p_med + 1
} else {
p_lat = p_lat + 1
}
}
}
p_lat = p_lat/(p_lat+p_med)
cln.table[order_col_names[j]][(nrow(cln.table)-2),] = p_lat*100
cln.table[order_col_names[j]][(nrow(cln.table)-1),] = p_none
p_none = p_none/(p_lat+p_med+p_none)
cln.table[order_col_names[j]][(nrow(cln.table)),] = p_none*100
}
directory = getwd()
write.csv(cln.table, file = paste0(directory, "/dfwide.csv"))
